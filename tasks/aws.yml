---
- hosts: localhost
  pre_tasks:
    - include_vars: ../defaults/main.yml
    - include_vars: ../vars/main.yml
    - include: check_ansible_version.yml
    # Add any existing machines to the inventory.
    - include: populate_inventory.yml
  roles:
    - aws
  tasks:
    # Add to the inventory again for any new machines
    # that we brought up.
    - include: populate_inventory.yml

- hosts: mesos-masters, mesos-slaves
  remote_user: "{{ remote_user }}"
  sudo: yes
  pre_tasks:
    - include_vars: ../vars/main.yml
  tasks:
  - name: RAMDISK in /var/lib/docker
    mount: name=/var/lib/docker src='tmpfs' fstype=tmpfs opts='size={{ ramdisk_gb }}g' state=mounted
  
  - name: RAMDISK in /var/lib/mesos
    mount: name=/var/lib/mesos src='tmpfs' fstype=tmpfs opts='size={{ ramdisk_gb }}g' state=mounted
  
  - name: RAMDISK in /var/log/mesos
    mount: name=/var/log/mesos src='tmpfs' fstype=tmpfs opts='size={{ ramdisk_gb }}g' state=mounted

  - name: Restart docker engine 
    service: name=docker state=started enabled=yes

- hosts: public-zk-nodes
  remote_user: "{{ remote_user }}"
  sudo: yes
  pre_tasks:
    - include_vars: ../defaults/main.yml
    - include_vars: ../vars/main.yml
  roles:
    - { role: zookeeper }

- hosts: mesos-masters
  remote_user: "{{ remote_user }}"
  sudo: yes
  pre_tasks:
    - include_vars: ../roles/mesos/defaults/main.yml
  roles:
    - { role: mesos, mesos_install_mode: master, mesos_port: 5050 }

- hosts: localhost
  pre_tasks:
    - include_vars: ../roles/mesos/defaults/main.yml
  tasks:
    - name: Gather security group facts
      ec2_group_facts:
        region: "{{ aws_region }}"
        filters:
          group_name: 
           - "[{{ mesos_cluster_id }}] Mesos Slave Security Group"
           - "[{{ mesos_cluster_id }}] Mesos Master Security Group"
           - "[{{ mesos_cluster_id }}] Mesos Gateway Security Group"
           - "[{{ mesos_cluster_id }}] Mesos Public Subnet Security Group"
      register: sg_facts

    - name: Create Mesos Agent Launch Config
      ec2_lc:
        name: agent
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        key_name: mesos120
        image_id: "{{ ec2_image_id }}"
        instance_type: "{{ ec2_instance_type }}"
        instance_profile_name: s2-pipelines
        state: present
        security_groups: 
          - "{{ sg_facts.security_groups[0].group_id }}"
          - "{{ sg_facts.security_groups[1].group_id }}"
          - "{{ sg_facts.security_groups[2].group_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 10
            device_type: io1
            iops: 500
            delete_on_termination: true
        ebs_optimized: true
        user_data: |
           #cloud-config
            runcmd:
              - systemctl stop mesos-master
              - systemctl stop mesos-slave
              - systemctl stop docker
              - mount -t tmpfs -o size=10g tmpfs /var/lib/docker
              - mount -t tmpfs -o size=10g tmpfs /var/lib/mesos
              - mount -t tmpfs -o size=10g tmpfs /var/log/mesos
              - rm -rf /etc/mesos
              - rm -rf /etc/mesos-master/
              - rm -rf /etc/mesos-slave/
              - rm /etc/default/mesos*
              - echo 'CLUSTER="{{ mesos_cluster_name }}"'                                                    > /etc/default/mesos
              - echo 'IP="'$(curl http://169.254.169.254/latest/meta-data/local-ipv4/)'"'                   >> /etc/default/mesos
              - echo 'LOGS="/var/log/mesos"'                                                                >> /etc/default/mesos
              - echo 'ULIMIT="-n 8192"'                                                                     >> /etc/default/mesos
              - echo 'ZK="{{ mesos_zookeeper_masters }}"'                                                  >> /etc/default/mesos
              - echo 'export MESOS_HOSTNAME="'$(curl http://169.254.169.254/latest/meta-data/local-ipv4/)'"' > /etc/default/mesos-slave
              - echo 'export MESOS_MASTER="{{ mesos_zookeeper_masters }}"'                                  >> /etc/default/mesos-slave
              - echo 'export MESOS_CONTAINERIZERS="docker,mesos"'                                           >> /etc/default/mesos-slave
              - echo 'export MESOS_EXECUTOR_REGISTRATION_TIMEOUT="5mins"'                                   >> /etc/default/mesos-slave
              - echo 'export MESOS_PORT="5051"'                                                             >> /etc/default/mesos-slave
              - echo 'export MESOS_WORK_DIR="/var/lib/mesos"'                                               >> /etc/default/mesos-slave
              - systemctl start docker
              - docker load < {{ docker_targz }}
              - systemctl start mesos-slave

    - name: Create Mesos Gateway Launch Config
      ec2_lc:
        name: gateway
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        key_name: mesos120
        image_id: "{{ ec2_image_id }}"
        instance_type: "{{ ec2_instance_type }}"
        assign_public_ip: true
        instance_profile_name: s2-pipelines
        state: present
        security_groups: 
          - "{{ sg_facts.security_groups[0].group_id }}"
          - "{{ sg_facts.security_groups[1].group_id }}"
          - "{{ sg_facts.security_groups[2].group_id }}"
          - "{{ sg_facts.security_groups[3].group_id }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 10
            device_type: io1
            iops: 500
            delete_on_termination: true
        ebs_optimized: true
        user_data: |
           #cloud-config
            runcmd:
              - systemctl stop mesos-master
              - systemctl stop mesos-slave
              - systemctl stop docker
              - mkdir /var/lib/jenkins
              - mount -t tmpfs -o size=10g tmpfs /var/lib/docker
              - mount -t tmpfs -o size=10g tmpfs /var/lib/jenkins
              - systemctl start docker
              - wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
              - rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
              - yum -y install git jenkins java-1.8.0-openjdk
              - sed -i 's/JENKINS_USER=.*/JENKINS_USER="centos"/' /etc/sysconfig/jenkins
              - chown -R centos:centos /var/lib/jenkins
              - chown -R centos:centos /var/cache/jenkins
              - chown -R centos:centos /var/log/jenkins
              - systemctl start jenkins
              - systemctl enable jenkins

    - name: Create Mesos Agent Autoscaling Group
      ec2_asg:
        name: agents
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        availability_zones: [ "{{ aws_subnet_az }}" ]
        launch_config_name: 'agent'
        min_size: 0
        max_size: 25
        desired_capacity: 1
        vpc_zone_identifier: [ "{{ vpc_subnet_id }}" ]
        tags:
          - Name: agent

    - name: Create Mesos Gateway Autoscaling Group
      ec2_asg:
        name: gateway
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        availability_zones: [ "{{ aws_subnet_az }}" ]
        launch_config_name: 'gateway'
        min_size: 0
        max_size: 3
        desired_capacity: 1
        vpc_zone_identifier: [ "{{ vpc_subnet_id }}" ]
        tags:
          - Name: gateway
