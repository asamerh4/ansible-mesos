---
#FACTS
- hosts: localhost
  pre_tasks:
    - include_vars: ../vars/main.yml
  
  roles:
    - token
    - secgroups
    - securitygroup_facts
    - ecs
    - eip
    - server_facts
    - asgroups
  
#CREATE SUBNET & SECGROUPS
- hosts: localhost
  pre_tasks:
    - include_vars: ../vars/main.yml
  roles:
    #- token
    # - { role: subnet_create,
          # subnet_name: "{{ cluster_id }}",
          # subnet_net: "{{ subnet_cidr }}",
          # subnet_gateway: "192.168.0.1",
          # subnet_primary_dns: "100.125.4.25",
          # subnet_secondary_dns: "8.8.8.8",
          # availability_zone: "eu-de-02",
      # }
#SECGROUP-PUBLIC
    - { role: secgroup_create,
          secgroup_name: "{{ cluster_id }}-public",
          when: secfact_public|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "22",
          secgrouprule_port_range_max: "22",
          secgrouprule_remote_ip_prefix: "0.0.0.0/0",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_public|length == 0
          
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "",
          secgrouprule_port_range_min: "",
          secgrouprule_port_range_max: "",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_public|length == 0
          
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "egress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_remote_ip_prefix: "0.0.0.0/0",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_public|length == 0
          
      }
- hosts: localhost
  pre_tasks:
    - include_vars: ../vars/main.yml
  roles:
#SECGROUP-ZOOKEEPER
    - { role: secgroup_create,         
          secgroup_name: "{{ cluster_id }}-zookeeper",
          when: secfact_zoo|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "2181",
          secgrouprule_port_range_max: "2181",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_zoo|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "2888",
          secgrouprule_port_range_max: "2888",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_zoo|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "3888",
          secgrouprule_port_range_max: "3888",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_zoo|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "egress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_remote_ip_prefix: "0.0.0.0/0",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_zoo|length == 0
      }

- hosts: localhost
  pre_tasks:
    - include_vars: ../vars/main.yml
  roles:
#SECGROUP-MASTER
    - { role: secgroup_create,         
          secgroup_name: "{{ cluster_id }}-master",
          when: secfact_master|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "5050",
          secgrouprule_port_range_max: "5050",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_master|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "egress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_remote_ip_prefix: "0.0.0.0/0",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_master|length == 0
      }
- hosts: localhost
  pre_tasks:
    - include_vars: ../vars/main.yml
  roles:
#SECGROUP-AGENT
    - { role: secgroup_create,         
          secgroup_name: "{{ cluster_id }}-agent",
          when: secfact_agent|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "5051",
          secgrouprule_port_range_max: "5051",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_agent|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "ingress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_protocol: "tcp",
          secgrouprule_port_range_min: "22",
          secgrouprule_port_range_max: "22",
          secgrouprule_remote_ip_prefix: "{{ subnet_cidr }}",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_agent|length == 0
      }
    - { role: secgrouprule_create,
          secgrouprule_direction: "egress",
          secgrouprule_ethertype: "IPv4",
          secgrouprule_remote_ip_prefix: "0.0.0.0/0",
          secgroup_id: "{{ secgroup['json']['security_group']['id'] }}",
          when: secfact_agent|length == 0
      }
 

#CREATE MASTER&ZOOKEEPER VM
- hosts: localhost
  vars:
    ecs_user_data: |
      #cloud-config
      runcmd:
        - echo 'IPADDR1=192.168.0.2' >> /etc/sysconfig/network-scripts/ifcfg-eth
        - systemctl restart network
        - iptables -t nat -A POSTROUTING \! -d 192.168.0.0/24 -o eth0 -j MASQUERADE
        - systemctl enable iptables
        - service iptables save

  roles:
    - secgroups
    - securitygroup_facts
    - { role: ecs_create,
          availability_zone: "eu-de-02",
          ecs_name: "mesos-master",
          ecs_volumesize: "10",
          ecs_volumetype: "SSD",
          flavor_id: "highmem2",
          secgroup_ids: '[{"id": "{{ secfact_public[0] }}"},{"id": "{{ secfact_master[0] }}"},{"id": "{{ secfact_zoo[0] }}"}]',
          ecs_ipaddress: "",
          subnet_id: "cb73b892-5fae-4044-bd23-229974d0d76c", 
          #"{{ subnet['json']['subnet']['id'] }}",
          ecs_adminpass: "",
          ecs_adminkey: "mesos130-api",
          when: master_public_ip is not defined
      }
  tasks:
  - name: wait for 4 minutes (ECS)
    pause:
      minutes: 4
    when: master_public_ip is not defined


#Populate Inventory    
- hosts: localhost
  pre_tasks:
    - include_vars: ../vars/main.yml
  roles:
    - secgroups
    - securitygroup_facts
    - ecs
    - eip
    - server_facts
  tasks:  
  - include: populate_otc_inventory.yml

#SW-config of MASTER&ZOOKEEPER
- hosts: mesos-masters
  remote_user: "{{ remote_user }}"
  become: yes
  pre_tasks:
    - include_vars: ../vars/main.yml
  tasks:
  - name: RAMDISK in /var/lib/docker
    mount: name=/var/lib/docker src='tmpfs' fstype=tmpfs opts='size={{ ramdisk_gb }}g' state=mounted
  - name: RAMDISK in /var/lib/mesos
    mount: name=/var/lib/mesos src='tmpfs' fstype=tmpfs opts='size={{ ramdisk_gb }}g' state=mounted 
  - name: RAMDISK in /var/log/mesos
    mount: name=/var/log/mesos src='tmpfs' fstype=tmpfs opts='size={{ ramdisk_gb }}g' state=mounted
  - name: Restart docker engine
    service: name=docker state=started enabled=yes

- hosts: public-zk-nodes
  remote_user: "{{ remote_user }}"
  become: yes
  pre_tasks:
    - include_vars: ../defaults/main.yml
    - include_vars: ../vars/main.yml
  roles:
    - { role: zookeeper }

- hosts: mesos-masters
  remote_user: "{{ remote_user }}"
  become: yes
  pre_tasks:
    - include_vars: ../roles/mesos/defaults/main.yml
  roles:
    - { role: mesos, mesos_install_mode: master, mesos_port: 5050 }



#CREATE AGENT AUTOSCALING GROUP
- hosts: localhost
  vars:
    current_as_groups: "{{ asgroups['json']['scaling_groups'] }}"
    agent_asconfig_userdata: |
      #cloud-config
      write_files:
        - content: |
            [default]
            output = json
            region = eu-de
          owner: linux:linux
          permissions: '0644'
          path: /home/linux/.aws/config
        - content: |
            [default]
            aws_access_key_id = {{ aws_access_key_id }}
            aws_secret_access_key = {{ aws_secret_access_key }}
          owner: linux:linux
          permissions: '0644'
          path: /home/linux/.aws/credentials
      runcmd:
        - mount -t tmpfs -o size=10g tmpfs /var/lib/docker
        - mount -t tmpfs -o size=10g tmpfs /var/lib/mesos
        - mount -t tmpfs -o size=10g tmpfs /var/log/mesos
        - echo 'tmpfs /var/lib/docker tmpfs size=10g 0 0'                         >> /etc/fstab
        - echo 'tmpfs /var/lib/mesos tmpfs size=10g 0 0'                          >> /etc/fstab
        - echo 'tmpfs /var/log/mesos tmpfs size=10g 0 0'                          >> /etc/fstab
        - rm -rf /etc/mesos
        - rm -rf /etc/mesos-master/
        - rm -rf /etc/mesos-slave/
        - rm /etc/default/mesos*
        - echo 'CLUSTER="{{ cluster_id }}"'                                        > /etc/default/mesos
        - echo 'IP="'$(hostname -I | cut -d" " -f 1)'"'                           >> /etc/default/mesos
        - echo 'LOGS="/var/log/mesos"'                                            >> /etc/default/mesos
        - echo 'ULIMIT="-n 8192"'                                                 >> /etc/default/mesos
        - echo 'ZK="zk://{{ master_private_ip }}:2181/mesos"'                     >> /etc/default/mesos
        - echo 'export MESOS_HOSTNAME="'$(hostname -I | cut -d" " -f 1)'"'         > /etc/default/mesos-slave
        - echo 'export MESOS_MASTER="zk://{{ master_private_ip }}:2181/mesos"'    >> /etc/default/mesos-slave
        - echo 'export MESOS_CONTAINERIZERS="docker,mesos"'                       >> /etc/default/mesos-slave
        - echo 'export MESOS_EXECUTOR_REGISTRATION_TIMEOUT="5mins"'               >> /etc/default/mesos-slave
        - echo 'export MESOS_PORT="5051"'                                         >> /etc/default/mesos-slave
        - echo 'export MESOS_WORK_DIR="/var/lib/mesos"'                           >> /etc/default/mesos-slave
        - systemctl start docker
        - systemctl enable docker
        - systemctl start mesos-slave
        - systemctl enable mesos-slave
  roles:   
    - { role: asconfig_create,
          asconfig_name: "agent",
          flavor: "highmem2",
          #image_id: from vars
          disk_size: "10",
          disk_type: "SSD",
          key: "mesos130-api",
          userdata: "{{ agent_asconfig_userdata }}",
          when: current_as_groups|length == 0
      }
    - { role: asgroup_create,
          asgroup_name: "agents",
          asconfig_id: "{{ asconfig['json']['scaling_configuration_id'] }}",
          desired: "1",
          min: "0",
          max: "1",
          cooldown: "200",
          subnet_id: "cb73b892-5fae-4044-bd23-229974d0d76c", 
          #"{{ subnet['json']['subnet']['id'] }}",
          secgroups: '[{"id": "{{ secfact_agent[0] }}"}]',
          when: current_as_groups|length == 0
      }
    - vpc_disable_checks
